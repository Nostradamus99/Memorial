// ===========================================================
//  Fonction pour la gestion dynamique du bouton auth/profil
// ===========================================================
document.addEventListener('DOMContentLoaded', function() {
    const btnAuth = document.getElementById('btn-auth');
    
    if (btnAuth) {
        // üîç V√©rifier si un utilisateur est connect√©
        const utilisateur = localStorage.getItem('utilisateur');
        const userProfile = localStorage.getItem('userProfile');
        
        if (utilisateur || userProfile) {
            // üë§ Utilisateur connect√© - Transformer en bouton profil
            console.log('‚úÖ Utilisateur connect√© - Affichage du bouton profil');
            
            btnAuth.textContent = 'Mon Profil';
            btnAuth.title = 'Acc√©der √† mon profil';
            
            // Redirection vers la page profil
            btnAuth.addEventListener('click', function() {
                console.log('üîÑ Redirection vers le profil...');
                window.location.href = 'profil.html'; // Ajustez selon votre structure
            });
            
        } else {
            // üö™ Utilisateur non connect√© - Garder le bouton auth
            console.log('‚ùå Utilisateur non connect√© - Affichage du bouton auth');
            
            btnAuth.textContent = 'S\'inscrire/Connexion';
            btnAuth.title = 'Se connecter ou cr√©er un compte';
            
            // Redirection vers la page authentification
            btnAuth.addEventListener('click', function() {
                console.log('üîÑ Redirection vers auth.html...');
                window.location.href = 'auth.html';
            });
        }
    }
});
// ============
//  M√©moriaux
// ============
document.addEventListener('DOMContentLoaded', function() {
    const boutonMemoriaux = document.getElementById("btn-memorials");

    boutonMemoriaux.addEventListener('click', function() {
        
        window.location.href = 'memoriaux.html';
    });
});

// ==========================================
//     SYST√àME DE GESTION DES M√âMORIAUX
// ==========================================

// üì¶ Fonction pour r√©cup√©rer tous les champs d'un formulaire
function recupererDonneesFormulaire() {
    const donnees = {};
    
    // R√©cup√®re tous les inputs, textareas et selects
    const champs = document.querySelectorAll('input, textarea, select');
    
    champs.forEach(champ => {
        if (champ.id) { // Seulement les champs avec un ID
            if (champ.type === 'checkbox' || champ.type === 'radio') {
                donnees[champ.id] = champ.checked;
            } else if (champ.type === 'file') {
                if (champ.files && champ.files[0]) {
                    // Convertir le fichier en base64 pour le stockage
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        donnees[champ.id] = e.target.result;
                        sauvegarderDansStorage(donnees);
                    };
                    reader.readAsDataURL(champ.files[0]);
                    return; // Sortir de la fonction car traitement asynchrone
                }
            } else {
                donnees[champ.id] = champ.value;
            }
        }
    });
    
    return donnees;
}

// üíæ Fonction pour sauvegarder dans le localStorage
function sauvegarderDansStorage(donnees) {
    // R√©cup√©rer les m√©moriaux existants
    let memoriaux = JSON.parse(localStorage.getItem('memoriaux') || '[]');
    
    // Ajouter un ID unique et une date
    donnees.id = Date.now(); // ID unique bas√© sur timestamp
    donnees.dateCreation = new Date().toLocaleDateString('fr-FR');
    
    // Ajouter le nouveau m√©morial
    memoriaux.push(donnees);
    
    // Sauvegarder dans le localStorage
    localStorage.setItem('memoriaux', JSON.stringify(memoriaux));
    
    // Message de confirmation
    alert('‚úÖ M√©morial sauvegard√© avec succ√®s !');
    
    // Rediriger vers le profil
    window.location.href = 'profil.html';
}

// üîÑ Fonction pour modifier un m√©morial existant
function modifierMemorial(donnees, id) {
    let memoriaux = JSON.parse(localStorage.getItem('memoriaux') || '[]');
    
    // Trouver et modifier le m√©morial
    const index = memoriaux.findIndex(m => m.id == id);
    if (index !== -1) {
        donnees.id = id; // Garder l'ID original
        donnees.dateModification = new Date().toLocaleDateString('fr-FR');
        memoriaux[index] = donnees;
        
        localStorage.setItem('memoriaux', JSON.stringify(memoriaux));
        alert('‚úÖ M√©morial modifi√© avec succ√®s !');
        window.location.href = 'profil.html';
    }
}

// üóëÔ∏è Fonction pour supprimer un m√©morial
function supprimerMemorial(id) {
    if (confirm('‚ùå √ätes-vous s√ªr de vouloir supprimer ce m√©morial ?')) {
        let memoriaux = JSON.parse(localStorage.getItem('memoriaux') || '[]');
        memoriaux = memoriaux.filter(m => m.id != id);
        localStorage.setItem('memoriaux', JSON.stringify(memoriaux));
        afficherMemoriaux(); // Rafra√Æchir l'affichage
        alert('‚úÖ M√©morial supprim√© !');
    }
}

// üìã Fonction pour afficher les m√©moriaux dans le profil
function afficherMemoriaux() {
    const container = document.getElementById('memorial-container');
    const compteur = document.getElementById('memorial-count');
    
    if (!container) return; // Pas sur la page profil
    
    const memoriaux = JSON.parse(localStorage.getItem('memoriaux') || '[]');
    
    // Mettre √† jour le compteur
    if (compteur) {
        compteur.textContent = memoriaux.length;
    }
    
    // Vider le container
    container.innerHTML = '';
    
    if (memoriaux.length === 0) {
        container.innerHTML = '<p>Aucun m√©morial cr√©√© pour le moment.</p>';
        return;
    }
    
    // Afficher les m√©moriaux (les 3 derniers)
    const derniersMemoriaux = memoriaux.slice(-3);
    
    derniersMemoriaux.forEach(memorial => {
        const div = document.createElement('div');
        div.className = 'memorial-item';
        div.innerHTML = `
            <div class="memorial-preview-card">
                <h3>${memorial.nom || 'M√©morial sans nom'}</h3>
                <p><strong>Cr√©√© le :</strong> ${memorial.dateCreation}</p>
                ${memorial.dateModification ? `<p><strong>Modifi√© le :</strong> ${memorial.dateModification}</p>` : ''}
                <div class="memorial-actions">
                    <button onclick="chargerPourModification(${memorial.id})" class="btn btn-secondary">
                        ‚úèÔ∏è Modifier
                    </button>
                    <button onclick="supprimerMemorial(${memorial.id})" class="btn btn-danger">
                        üóëÔ∏è Supprimer
                    </button>
                </div>
            </div>
        `;
        container.appendChild(div);
    });
}

// ‚úèÔ∏è Fonction pour charger un m√©morial pour modification
function chargerPourModification(id) {
    // Stocker l'ID du m√©morial √† modifier
    localStorage.setItem('memorial-a-modifier', id);
    // Rediriger vers la page de modification
    window.location.href = 'modifier-memorial.html';
}

// üîÑ Fonction pour charger les donn√©es dans le formulaire de modification
function chargerDonneesModification() {
    const id = localStorage.getItem('memorial-a-modifier');
    if (!id) return;
    
    const memoriaux = JSON.parse(localStorage.getItem('memoriaux') || '[]');
    const memorial = memoriaux.find(m => m.id == id);
    
    if (!memorial) return;
    
    // Remplir tous les champs
    Object.keys(memorial).forEach(cle => {
        const champ = document.getElementById(cle);
        if (champ) {
            if (champ.type === 'checkbox' || champ.type === 'radio') {
                champ.checked = memorial[cle];
            } else if (champ.type === 'file') {
                // Les fichiers ne peuvent pas √™tre recharg√©s pour des raisons de s√©curit√©
                // Tu peux afficher un aper√ßu si c'est une image
            } else {
                champ.value = memorial[cle];
            }
        }
    });
}

// üöÄ INITIALISATION - Code qui s'ex√©cute au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    
    // === PAGE CR√âATION ===
    const btnCreer = document.getElementById('btn-sauvegarder-creer');
    if (btnCreer) {
        btnCreer.addEventListener('click', function() {
            const donnees = recupererDonneesFormulaire();
            sauvegarderDansStorage(donnees);
        });
    }
    
    // === PAGE MODIFICATION ===
    const btnModifier = document.getElementById('btn-sauvegarder-modifier');
    if (btnModifier) {
        // Charger les donn√©es existantes
        chargerDonneesModification();
        
        // G√©rer la sauvegarde
        btnModifier.addEventListener('click', function() {
            const donnees = recupererDonneesFormulaire();
            const id = localStorage.getItem('memorial-a-modifier');
            modifierMemorial(donnees, id);
        });
    }
    
    // === PAGE PROFIL ===
    const container = document.getElementById('memorial-container');
    if (container) {
        afficherMemoriaux();
    }
    
});

document.addEventListener('DOMContentLoaded', function() {
    const boutonMemoriaux = document.getElementById("btn-retour");

    boutonMemoriaux.addEventListener('click', function() {
        
        window.location.href = 'profil.html';
    });
});